#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:base64", "base64")
#@ load("inject_auth_proxy.lib.yml", "read_value","inject_secret")

#@ if data.values.observability.enabled:
---
#@ if hasattr(data.values, "namespace"):
#! deployment with driver so use driver's namespace
#@ observabilityNamespace = data.values.namespace
#@ else:
#! standalone deployment of observability
#@ observabilityNamespace = data.values.observability.namespace
#@ end

#@ hasUserIssuedCertTopology = (hasattr(data.values.karaviTopology, "certificateFile") and hasattr(data.values.karaviTopology, "privateKeyFile"))
#@ hasUserIssuedCertOtelCollector = (hasattr(data.values.otelCollector, "certificateFile") and hasattr(data.values.otelCollector, "privateKeyFile"))
#@ hasUserIssuedCertPowerStoreMetrics = (hasattr(data.values.karaviMetricsPowerstore, "certificateFile") and hasattr(data.values.karaviMetricsPowerstore, "privateKeyFile"))

#! If the karavi-metrics-powerstore cert and key are provided, deploy a CA Issuer using the cert and key
#@ if hasUserIssuedCertPowerStoreMetrics and data.values.karaviMetricsPowerstore.enabled:
#@ certificateFileContents = data.values.karaviMetricsPowerstore.certificateFile
#@ privateKeyFileContents = data.values.karaviMetricsPowerstore.privateKeyFile
---
#@overlay/match missing_ok=True
apiVersion: v1
data:
  tls.crt: #@ base64.encode(certificateFileContents)
  tls.key: #@ base64.encode(privateKeyFileContents)
kind: Secret
type: kubernetes.io/tls
metadata:
  name: karavi-metrics-powerstore-secret
  namespace: #@ observabilityNamespace

#@ end


#! If the karavi-topology cert and key are provided, deploy a CA Issuer using the cert and key
#@ if hasUserIssuedCertTopology and data.values.karaviTopology.enabled:
#@ certificateFileContents = data.values.karaviTopology.certificateFile
#@ privateKeyFileContents = data.values.karaviTopology.privateKeyFile
---
#@overlay/match missing_ok=True
apiVersion: v1
data:
  tls.crt: #@ base64.encode(certificateFileContents)
  tls.key: #@ base64.encode(privateKeyFileContents)
kind: Secret
type: kubernetes.io/tls
metadata:
  name: karavi-topology-secret
  namespace: #@ observabilityNamespace
#@ end


#! If the otelCollector cert and key are provided, deploy a CA Issuer using the cert and key
#@ if hasUserIssuedCertOtelCollector and (data.values.karaviMetricsPowerstore.enabled or data.values.karaviMetricsPowerflex.enabled):
#@ certificateFileContents = data.values.otelCollector.certificateFile
#@ privateKeyFileContents = data.values.otelCollector.privateKeyFile
---
#@overlay/match missing_ok=True
apiVersion: v1
data:
  tls.crt: #@ base64.encode(certificateFileContents)
  tls.key: #@ base64.encode(privateKeyFileContents)
kind: Secret
type: kubernetes.io/tls
metadata:
  name: otel-collector-secret
  namespace: #@ observabilityNamespace
#@ end


#! for standalone, we need to deploy configs for driver
#@ if data.values.observability.standalone:
#@overlay/match missing_ok=True
#@ if data.values.karaviMetricsPowerstore.enabled:
#@ secret = yaml.decode(read_value(data.values.karaviMetricsPowerstore.driverConfig.filename, data.values.karaviMetricsPowerstore.driverConfig.data))
#@ secret["metadata"]["namespace"] = observabilityNamespace 
--- #@ secret
#@ end

#@ if data.values.karaviMetricsPowerflex.enabled:
#@ secret = yaml.decode(read_value(data.values.karaviMetricsPowerflex.driverConfig.filename, data.values.karaviMetricsPowerflex.driverConfig.data))
#@ secret["metadata"]["namespace"] = observabilityNamespace
#@ if data.values.authorization.enabled:
#@ secret["data"]["config"] = base64.encode(inject_secret("vxflexos", data.values.karaviAuthorizationProxy.defaultStartingPortRange, base64.decode(data.values.karaviMetricsPowerflex.driverConfig.onlyConfig)))
#@ end 
--- #@ secret
#@ end
#@ end

#@ end
