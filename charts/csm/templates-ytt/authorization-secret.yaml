#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")
#@ load("@ytt:json", "json")
#@ load("@ytt:yaml", "yaml")
#@ load("inject_auth_proxy.lib.yml", "read_value", "get_tokens", "auth_secret", "get_auth_namespace")

#@ def get_config():
#@   if hasattr(data.values, "arrayconfig"):
#@     return auth_secret(data.values.application, data.values.karaviAuthorizationProxy.defaultStartingPortRange, json.encode(yaml.decode(data.values.arrayconfig)))
#@   elif hasattr(data.values, "application") and data.values.application == "powermax":
#@     return auth_secret(data.values.application, data.values.karaviAuthorizationProxy.defaultStartingPortRange, "")
#@   elif hasattr(data.values, "observability") and data.values.observability.standalone:
#@      if data.values.karaviMetricsPowerflex.enabled:
#@        return auth_secret("vxflexos", data.values.karaviAuthorizationProxy.defaultStartingPortRange, base64.decode(data.values.karaviMetricsPowerflex.driverConfig.onlyConfig))
#@      else:
#@        assert.fail("observability does not yet support installing authorization for this driver")
#@      end
#@   end
#@   assert.fail("Unsupported authorization deployment")
#@ end 

#@ if data.values.authorization.enabled:
#! proxy-authz-tokens secret
#@ tokens = get_tokens(data.values.karaviAuthorizationProxy.proxyAuthzToken.filename, data.values.karaviAuthorizationProxy.proxyAuthzToken.data)
---
#@overlay/match missing_ok=True
apiVersion: v1
kind: Secret
metadata:
  name: proxy-authz-tokens
  namespace: #@ get_auth_namespace()
type: Opaque
data:
  access: #@ tokens["access"] 
  refresh: #@ tokens["refresh"]

#! karavi-authorization-config secret
---
#@overlay/match missing_ok=True
apiVersion: v1
kind: Secret
metadata:
  name: karavi-authorization-config
  namespace: #@ get_auth_namespace()
type: Opaque
data:
  config: #@ base64.encode(get_config())

#! proxy-server-root-certificate
---
#@overlay/match missing_ok=True
apiVersion: v1
kind: Secret
metadata:
  name: proxy-server-root-certificate
  namespace: #@ get_auth_namespace()
type: Opaque
data:
  rootCertificate.pem: #@ base64.encode(read_value(data.values.karaviAuthorizationProxy.rootCertificate.filename,data.values.karaviAuthorizationProxy.rootCertificate.data))
#@ end
